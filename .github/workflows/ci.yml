name: Smart Books API CI

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ dev, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 coverage psycopg2-binary

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: books_api.settings
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        CACHE_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: "True"
        NY_TIMES_API_KEY: ${{ secrets.NY_TIMES_API_KEY || 'dummy_key_for_tests' }}
        GOOGLE_BOOKS_API_KEY: ${{ secrets.GOOGLE_BOOKS_API_KEY || 'dummy_key_for_tests' }}
        OPEN_LIBRARY_API_KEY: ${{ secrets.OPEN_LIBRARY_API_KEY || 'dummy_key_for_tests' }}
      run: |
        python manage.py migrate
        python -m coverage run --source='books' manage.py test --noinput -v 2
        python -m coverage report -m

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        tags: smart-books-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
